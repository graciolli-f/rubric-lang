module ImageUtils {
  @ "Pure utility functions for image processing"
  @ "No side effects, deterministic outputs"

  type: "utility"
  
  location: "src/utils/image.ts"
  
  interface {
    @ "File conversion functions"
    public fileToBase64(file: File) -> Promise<string>
    public base64ToDataUrl(base64: string, mimeType: string) -> string
    public dataUrlToBase64(dataUrl: string) -> string
    
    @ "Image processing functions"
    public resizeImageCanvas(base64: string, maxWidth: number, maxHeight: number) -> Promise<string>
    public createThumbnailCanvas(base64: string, size: number) -> Promise<string>
    public getImageDimensions(base64: string) -> Promise<{width: number, height: number}>
    
    @ "Validation functions"
    public isValidImageType(mimeType: string) -> boolean
    public isValidImageSize(file: File, maxSizeBytes: number) -> boolean
    public validateImageFile(file: File) -> ValidationResult
    
    @ "Helper constants"
    public readonly SUPPORTED_IMAGE_TYPES: string[]
    public readonly MAX_IMAGE_SIZE: number
    public readonly THUMBNAIL_SIZE: number
  }
  
  state {
    @ "No mutable state allowed in utilities"
    @ "Use module-level constants instead"
    private readonly CONFIG = {
      maxFileSize: 5242880,
      thumbnailSize: 150,
      supportedTypes: ["image/jpeg", "image/png", "image/webp"]
    }
  }
  
  imports {
    @ "Types only"
    allow "../types/expense.types" as types
    
    @ "Validation utilities for image validation"
    allow "./validation" as {ValidationResult, validateFile}
    
    @ "No framework imports"
    deny imports ["react", "vue", "@angular/*"]
    
    @ "No side-effect imports"
    deny imports ["../stores/*", "../services/*", "../data/*"]
    
    @ "No component imports"
    deny imports ["../components/*"]
  }
  
  constraints {
    @ "Pure functions except canvas operations"
    deny io.network.*
    deny io.localStorage.*
    deny pattern.side_effects
    
    @ "Canvas operations allowed for image processing"
    allow io.canvas.*
    allow io.file.* @ "For File API operations"
    
    @ "Async operations allowed for image processing"
    allow pattern.async
    allow pattern.promises
    
    @ "Error handling"
    require pattern.defensive @ "Validate inputs"
    require pattern.try_catch_blocks
    
    @ "Documentation"
    require pattern.jsdoc @ "Document complex functions"
    
    @ "Export all public functions"
    require exports ["[!_]*"]
    
    @ "Size constraints"
    warn file.lines > 150
    deny file.lines > 300
    warn function.lines > 30
  }
}