module AuthStore {
  @ "State management for user authentication"
  @ "Coordinates between UI and authentication services"

  type: "store"
  
  location: "src/stores/auth-store.ts"
  
  interface {
    @ "Zustand store hook"
    public useAuthStore() -> {
      @ "State"
      user: User?,
      isAuthenticated: boolean,
      isLoading: boolean,
      error: string?,
      
      @ "Authentication actions"
      login: (data: LoginData) -> Promise<void>,
      signup: (data: SignupData) -> Promise<void>,
      logout: () -> Promise<void>,
      refreshToken: () -> Promise<void>,
      
      @ "Password reset actions"
      requestPasswordReset: (email: string) -> Promise<void>,
      resetPassword: (data: PasswordResetData) -> Promise<void>,
      
      @ "User management actions"
      updateProfile: (data: Partial<User>) -> Promise<void>,
      deleteAccount: () -> Promise<void>,
      
      @ "Session management"
      checkAuthStatus: () -> Promise<void>,
      initializeAuth: () -> Promise<void>,
      
      @ "UI state actions"
      clearError: () -> void,
      setLoading: (loading: boolean) -> void
    }
  }
  
  state {
    @ "Internal state shape"
    private _user: User?
    private _isAuthenticated: boolean
    private _isLoading: boolean
    private _error: string?
    private _token: string?
    private _refreshToken: string?
  }
  
  imports {
    @ "State management library"
    allow "zustand" as external
    allow "zustand/middleware" as external
    
    @ "Service layer for authentication logic"
    allow "../services/auth-service" as {authService}
    
    @ "Types"
    allow "../types/auth.types" as types
    
    @ "Error handling"
    allow "../utils/errors" as {formatError}
    
    @ "Cannot import data layer directly"
    deny imports ["../data/*"]
    
    @ "Cannot import components"
    deny imports ["../components/*"]
  }
  
  constraints {
    @ "State management patterns"
    require pattern.immutable_updates
    require pattern.action_error_handling
    
    @ "No business logic - delegate to services"
    deny pattern.complex_calculations
    deny pattern.validation_logic
    
    @ "API calls only through services"
    deny io.network.*
    
    @ "Secure token storage"
    allow io.localStorage.* @ "Secure token storage only"
    require pattern.secure_storage
    
    @ "DevTools support"
    allow io.console.* when NODE_ENV="development"
    
    @ "Performance"
    require pattern.selector_memoization
    
    @ "Export restrictions"
    deny exports ["_*", "token", "refreshToken"]
    
    @ "Size constraints"
    warn file.lines > 200
    deny file.lines > 400
  }
}