module AuthData {
  @ "Data access layer for authentication operations"
  @ "Direct API/database calls only, no business logic"

  type: "data"
  
  location: "src/data/auth-data.ts"
  
  interface {
    @ "Authentication operations"
    public authenticateUser(email: string, password: string) -> Promise<AuthResponse>
    public createUser(data: SignupData) -> Promise<User>
    public refreshUserToken(refreshToken: string) -> Promise<AuthResponse>
    public logoutUser(token: string) -> Promise<void>
    
    @ "Session management"
    public validateToken(token: string) -> Promise<User>
    public invalidateToken(token: string) -> Promise<void>
    public getUserByToken(token: string) -> Promise<User>
    
    @ "Password operations"
    public requestPasswordReset(email: string) -> Promise<void>
    public resetPassword(token: string, newPassword: string) -> Promise<void>
    public updatePassword(userId: string, hashedPassword: string) -> Promise<void>
    
    @ "User data operations"
    public fetchUser(id: string) -> Promise<User>
    public fetchUserByEmail(email: string) -> Promise<User?>
    public updateUser(id: string, data: Partial<User>) -> Promise<User>
    public deleteUser(id: string) -> Promise<void>
    public userExists(email: string) -> Promise<boolean>
  }
  
  state {
    @ "API client reference"
    private apiClient: APIClient
    private apiEndpoint: string
  }
  
  imports {
    @ "API client"
    allow "../lib/api-client" as {apiClient}
    allow "axios" as external
    
    @ "Types only"
    allow "../types/auth.types" as types
    
    @ "No business logic imports"
    deny imports ["../services/*", "../stores/*"]
    
    @ "No UI imports"
    deny imports ["../components/*", "../hooks/*"]
  }
  
  constraints {
    @ "Direct data operations only"
    require pattern.single_responsibility
    deny pattern.business_logic
    deny pattern.data_transformation @ "Return raw data"
    
    @ "Error handling"
    require pattern.throw_on_error @ "Let services handle errors"
    deny pattern.error_transformation @ "Throw raw errors"
    
    @ "No caching at this layer"
    deny pattern.caching @ "Services handle caching"
    
    @ "No validation"
    deny pattern.validation @ "Services validate"
    
    @ "Logging for debugging"
    allow io.console.error
    allow io.console.log when NODE_ENV="development"
    
    @ "Network operations allowed"
    allow io.network.*
    
    @ "Export restrictions"
    deny exports ["_*", "apiClient", "apiEndpoint"]
    
    @ "Size constraints"
    warn file.lines > 200
    deny file.lines > 300
  }
}