module GroupTypes {
  @ "Type definitions for expense groups and collaboration"
  @ "No side effects, pure type definitions"

  type: "utility"
  
  location: "src/types/group.types.ts"
  
  interface {
    @ "Group interface"
    public interface Group {
      id: string,
      name: string,
      description?: string,
      createdBy: string,
      createdAt: string,
      updatedAt: string,
      members: GroupMember[],
      settings: GroupSettings
    }
    
    @ "Group member interface"
    public interface GroupMember {
      userId: string,
      userName: string,
      userEmail: string,
      role: GroupRole,
      joinedAt: string,
      isActive: boolean
    }
    
    @ "Group role enumeration"
    public enum GroupRole = "member" | "manager" | "owner"
    
    @ "Group settings interface"
    public interface GroupSettings {
      approvalThreshold: number,
      allowMemberInvites: boolean,
      requireApprovalForExpenses: boolean,
      defaultCurrency: string
    }
    
    @ "Group invitation interface"
    public interface GroupInvitation {
      id: string,
      groupId: string,
      groupName: string,
      invitedBy: string,
      invitedEmail: string,
      status: InvitationStatus,
      createdAt: string,
      expiresAt: string
    }
    
    @ "Invitation status enumeration"
    public enum InvitationStatus = "pending" | "accepted" | "declined" | "expired"
    
    @ "Group creation form data"
    public interface GroupFormData {
      name: string,
      description?: string,
      settings?: Partial<GroupSettings>
    }
    
    @ "Member invitation data"
    public interface InviteMemberData {
      email: string,
      role: GroupRole
    }
  }
  
  state {
    @ "No mutable state allowed in types"
  }
  
  imports {
    @ "No imports allowed in types"
  }
  
  constraints {
    @ "Pure types only"
    deny io.*  @ "No I/O operations"
    deny pattern.side_effects
    deny pattern.runtime_code
    
    @ "Export all public types"
    require exports ["[!_]*"]
    
    @ "Size constraints"
    warn file.lines > 100
    deny file.lines > 200
  }
}