module ActivityTypes {
  @ "Type definitions for activity feed and approval workflows"
  @ "No side effects, pure type definitions"

  type: "utility"
  
  location: "src/types/activity.types.ts"
  
  interface {
    @ "Activity entry interface"
    public interface Activity {
      id: string,
      type: ActivityType,
      userId: string,
      userName: string,
      groupId?: string,
      entityId: string,
      entityType: EntityType,
      action: ActivityAction,
      details: ActivityDetails,
      timestamp: string
    }
    
    @ "Activity type enumeration"
    public enum ActivityType = "expense" | "approval" | "group" | "member"
    
    @ "Entity type enumeration"  
    public enum EntityType = "expense" | "group" | "user" | "invitation"
    
    @ "Activity action enumeration"
    public enum ActivityAction = "created" | "updated" | "deleted" | "approved" | "rejected" | "invited" | "joined" | "left"
    
    @ "Activity details interface"
    public interface ActivityDetails {
      expenseAmount?: number,
      expenseDescription?: string,
      previousValue?: any,
      newValue?: any,
      reason?: string
    }
    
    @ "Approval request interface"
    public interface ApprovalRequest {
      id: string,
      expenseId: string,
      requestedBy: string,
      requestedByName: string,
      groupId?: string,
      amount: number,
      description: string,
      status: ApprovalStatus,
      createdAt: string,
      reviewedAt?: string,
      reviewedBy?: string,
      reviewerName?: string,
      reason?: string
    }
    
    @ "Approval status enumeration"
    public enum ApprovalStatus = "pending" | "approved" | "rejected"
    
    @ "Approval action interface"
    public interface ApprovalAction {
      requestId: string,
      action: ApprovalStatus,
      reason?: string
    }
    
    @ "Presence interface for real-time collaboration"
    public interface UserPresence {
      userId: string,
      userName: string,
      groupId?: string,
      location: string,
      isEditing?: boolean,
      editingEntityId?: string,
      lastSeen: string
    }
    
    @ "Real-time update interface"
    public interface RealtimeUpdate {
      type: RealtimeUpdateType,
      payload: any,
      userId: string,
      userName: string,
      timestamp: string
    }
    
    @ "Real-time update type enumeration"
    public enum RealtimeUpdateType = "expense_created" | "expense_updated" | "expense_deleted" | "approval_requested" | "approval_decided" | "user_joined" | "user_editing"
  }
  
  state {
    @ "No mutable state allowed in types"
  }
  
  imports {
    @ "No imports allowed in types"
  }
  
  constraints {
    @ "Pure types only"
    deny io.*  @ "No I/O operations"
    deny pattern.side_effects
    deny pattern.runtime_code
    
    @ "Export all public types"
    require exports ["[!_]*"]
    
    @ "Size constraints"
    warn file.lines > 150
    deny file.lines > 250
  }
}