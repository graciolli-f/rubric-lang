module ReceiptService {
  @ "Business logic for receipt image management"
  @ "Handles receipt photo storage, validation, and retrieval"

  type: "service"
  
  location: "src/services/receipt-service.ts"
  
  interface {
    @ "Receipt management methods"
    public uploadReceipt(file: File) -> Promise<string>
    public deleteReceipt(receiptId: string) -> Promise<void>
    public getReceipt(receiptId: string) -> Promise<string | null>
    public validateReceiptFile(file: File) -> ValidationResult
    
    @ "Image processing methods"
    public resizeImage(base64: string, maxWidth: number, maxHeight: number) -> Promise<string>
    public createThumbnail(base64: string) -> Promise<string>
    public getImageDimensions(base64: string) -> Promise<{width: number, height: number}>
    
    @ "Storage management"
    public clearAllReceipts() -> Promise<void>
    public getStorageUsage() -> Promise<number>
  }
  
  state {
    @ "Service configuration"
    private _config: {
      maxFileSize: number,
      allowedTypes: string[],
      thumbnailSize: number,
      storageKeyPrefix: string
    }
  }
  
  imports {
    @ "Types and interfaces"
    allow "../types/expense.types" as types
    
    @ "Utilities for validation and image processing"
    allow "../utils/image" as {imageUtils}
    allow "../utils/validation" as {validators}
    
    @ "Cannot import UI or stores"
    deny imports ["../components/*", "../stores/*"]
    
    @ "Cannot import data layer directly"
    deny imports ["../data/*"]
  }
  
  constraints {
    @ "Error handling required"
    require pattern.try_catch_blocks
    require pattern.error_transformation
    
    @ "No UI concerns"
    deny pattern.jsx_elements
    deny imports ["react", "@mui/material"]
    
    @ "Input validation"
    require pattern.input_validation
    require pattern.business_rules
    
    @ "LocalStorage operations allowed"
    allow io.localStorage.*
    
    @ "File operations for image processing"
    allow io.file.*
    
    @ "Canvas operations for image processing"
    allow io.canvas.*
    
    @ "Logging for debugging"
    allow io.console.error
    allow io.console.warn when NODE_ENV="development"
    
    @ "Export only public interface"
    deny exports ["_*", "config"]
    
    @ "Complexity management"
    warn file.lines > 200
    deny file.lines > 400
    warn function.complexity > 8
  }
}