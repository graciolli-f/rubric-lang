module ExportService {
  @ "Business logic for exporting expense data"
  @ "Handles CSV generation, date filtering, and file downloads"

  type: "service"
  
  location: "src/services/export-service.ts"
  
  interface {
    @ "Export methods"
    public exportExpensesToCSV(expenses: Expense[], options?: ExportOptions) -> Promise<string>
    public downloadCSV(csvContent: string, filename: string) -> Promise<void>
    public generateFilename(options?: ExportOptions) -> string
    
    @ "Data filtering methods"
    public filterExpensesByDateRange(expenses: Expense[], startDate?: string, endDate?: string) -> Expense[]
    public sortExpensesByDate(expenses: Expense[], ascending?: boolean) -> Expense[]
    
    @ "CSV formatting methods"
    public formatExpenseForCSV(expense: Expense, preferredCurrency?: Currency) -> Promise<Record<string, string>>
    public escapeCSVField(field: string) -> string
    public createCSVHeader() -> string[]
    
    @ "Validation methods"
    public validateExportOptions(options: ExportOptions) -> ValidationResult
    public validateDateRange(startDate?: string, endDate?: string) -> ValidationResult
  }
  
  state {
    @ "Service configuration"
    private _config: {
      dateFormat: string,
      csvDelimiter: string,
      maxExportRecords: number
    }
  }
  
  imports {
    @ "Types and interfaces"
    allow "../types/expense.types" as types
    
    @ "Services for currency conversion"
    allow "./currency-service" as {currencyService}
    
    @ "Utilities for validation and date handling"
    allow "../utils/validation" as {validators}
    allow "../utils/date" as {dateUtils}
    
    @ "Cannot import UI or stores"
    deny imports ["../components/*", "../stores/*"]
    
    @ "Cannot import data layer directly"
    deny imports ["../data/*"]
  }
  
  constraints {
    @ "Error handling required"
    require pattern.try_catch_blocks
    require pattern.error_transformation
    
    @ "No UI concerns"
    deny pattern.jsx_elements
    deny imports ["react", "@mui/material"]
    
    @ "Input validation"
    require pattern.input_validation
    require pattern.business_rules
    
    @ "File operations for download"
    allow io.file.*
    
    @ "DOM operations for download"
    allow io.dom.* @ "For creating download links"
    
    @ "Logging for debugging"
    allow io.console.error
    allow io.console.warn when NODE_ENV="development"
    
    @ "Export only public interface"
    deny exports ["_*", "config"]
    
    @ "Complexity management"
    warn file.lines > 200
    deny file.lines > 350
    warn function.complexity > 8
  }
}