module RecurringService {
  @ "Business logic for recurring expense management"
  @ "Handles automatic generation and scheduling of recurring expenses"

  type: "service"
  
  location: "src/services/recurring-service.ts"
  
  interface {
    @ "Recurring generation methods"
    public generateRecurringExpenses(expenses: Expense[], currentDate?: Date) -> Promise<Expense[]>
    public calculateNextDueDate(expense: Expense, fromDate?: Date) -> Date
    public isExpenseDue(expense: Expense, currentDate?: Date) -> boolean
    
    @ "Recurring management methods"
    public createRecurringExpense(formData: ExpenseFormData) -> Promise<Expense>
    public updateRecurringExpense(id: string, formData: ExpenseFormData) -> Promise<Expense>
    public stopRecurringExpense(id: string) -> Promise<Expense>
    
    @ "Schedule calculation methods"
    public getNextOccurrences(expense: Expense, count: number) -> Date[]
    public getRecurringSchedule(frequency: RecurringFrequency, startDate: Date, count: number) -> Date[]
    public getDaysBetweenOccurrences(frequency: RecurringFrequency) -> number
    
    @ "Validation methods"
    public validateRecurringData(data: ExpenseFormData) -> ValidationResult
    public validateRecurringFrequency(frequency: RecurringFrequency) -> ValidationResult
  }
  
  state {
    @ "Service configuration"
    private _config: {
      maxFutureGeneration: number,
      maxRecurrences: number
    }
  }
  
  imports {
    @ "Types and interfaces"
    allow "../types/expense.types" as types
    
    @ "Utilities for validation and date handling"
    allow "../utils/validation" as {validators}
    allow "../utils/date" as {dateUtils}
    
    @ "Cannot import UI or stores"
    deny imports ["../components/*", "../stores/*"]
    
    @ "Cannot import data layer directly"
    deny imports ["../data/*"]
  }
  
  constraints {
    @ "Error handling required"
    require pattern.try_catch_blocks
    require pattern.error_transformation
    
    @ "No UI concerns"
    deny pattern.jsx_elements
    deny imports ["react", "@mui/material"]
    
    @ "Input validation"
    require pattern.input_validation
    require pattern.business_rules
    
    @ "No I/O operations"
    deny io.network.*
    deny io.localStorage.*
    deny io.file.*
    
    @ "Logging for debugging"
    allow io.console.error
    allow io.console.warn when NODE_ENV="development"
    
    @ "Export only public interface"
    deny exports ["_*", "config"]
    
    @ "Complexity management"
    warn file.lines > 200
    deny file.lines > 350
    warn function.complexity > 8
  }
}